generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Society {
  id            String      @id @default(uuid())
  name          String      @unique
  status        String      // 'active', 'inactive', 'pending_subscription', 'trail_period', 'blocked' etc.
  members       Member[]
  roles         Role[]
  subscription  Subscription[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Subscription {
  id                      String           @id @default(uuid())
  planId                  String
  societyId               String          
  society                 Society          @relation(fields: [societyId], references: [id])
  razorpaySubId           String           @unique
  status                  String           // 'created', 'active', etc.
  startDate               DateTime
  endDate                 DateTime
  nextBillingAt           DateTime
  paidCount               Int              // Track the number of billing cycles paid
  authAttempts            Int              // Track failed attempts to charge
  customerId             String?           // Razorpay customer ID
  paymentMethod          String?           // 'card', 'wallet', etc.
  shortUrl               String?           // URL for authorization link
  createdAt              DateTime         @default(now())
}

model Member {
  id                              String      @id @default(uuid())
  name                            String
  phoneNumber                     String      
  email                           String?     
  password                        String
  isCustomPermissionsEnabled      Boolean     @default(false)
  customPermissions               String[]    @default([])    // e.g., ["read_members", "update_members"]
  refreshToken                    RefreshToken? 
  roleId                          String?
  role                            Role?       @relation(fields: [roleId], references: [id])
  societyId                       String
  society                         Society     @relation(fields: [societyId], references: [id])
  createdAt                       DateTime    @default(now())
  updatedAt                       DateTime    @updatedAt
}

model Role {
  id            String      @id @default(uuid())
  name          String      
  permissions   String[]    // e.g., ["read_members", "update_members"]
  members       Member[]
  societyId     String
  society       Society     @relation(fields: [societyId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model RefreshToken {
  id              String           @id @default(uuid())
  expiresAt       DateTime
  userAgent       String
  ipAddress       String

  createdAt       DateTime      @default(now())

  member          Member        @relation(fields: [memberId], references: [id])
  memberId        String        @unique
}

